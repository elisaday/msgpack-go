package msgpack

import (
	"bytes"
	"testing"
)

func TestPackUInt64(t *testing.T) {
	b := &bytes.Buffer{}

	for _, i := range []uint64{0, 1, 31, 32, 33, 63, 64, 65, 126, 127, 128, 129,
		192, 201, 254, 255, 256,
		32764, 32765, 32766, 65534, 65535, 65536,
		2147483646, 2147483647, 21474836478,
		4294967294, 4294967295, 4294967296,
		9223372036854775806, 9223372036854775807, 9223372036854775808,
		18446744073709551613, 18446744073709551614, 18446744073709551615} {
		_, err := PackUInt64(b, i)
		if err != nil {
			t.Error("err != nil")
		}
	}

	if bytes.Compare(b.Bytes(), []byte{
		0x0, 0x1, 0x1f, 0x20, 0x21, 0x3f, 0x40, 0x41, 0x7e, 0x7f, 0xcc, 0x80,
		0xcc, 0x81, 0xcc, 0xc0, 0xcc, 0xc9, 0xcc, 0xfe, 0xcc, 0xff, 0xcd, 0x1,
		0x0, 0xcd, 0x7f, 0xfc, 0xcd, 0x7f, 0xfd, 0xcd, 0x7f, 0xfe, 0xcd, 0xff,
		0xfe, 0xcd, 0xff, 0xff, 0xce, 0x0, 0x1, 0x0, 0x0, 0xce, 0x7f, 0xff,
		0xff, 0xfe, 0xce, 0x7f, 0xff, 0xff, 0xff, 0xcf, 0x0, 0x0, 0x0, 0x4,
		0xff, 0xff, 0xff, 0xfe, 0xce, 0xff, 0xff, 0xff, 0xfe, 0xce, 0xff, 0xff,
		0xff, 0xff, 0xcf, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0xcf, 0x7f,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xcf, 0x7f, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xcf, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xcf, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff}) != 0 {
		t.Error("wrong output", b.Bytes())
	}
}

func TestPackInt64(t *testing.T) {
	b := &bytes.Buffer{}

	for _, i := range []int64{0, 1, 31, 32, 33, 63, 64, 65, 126, 127, 128, 129,
		192, 201, 254, 255, 256,
		32764, 32765, 32766, 65534, 65535, 65536,
		2147483646, 2147483647, 21474836478,
		4294967294, 4294967295, 4294967296,
		9223372036854775806, 9223372036854775807,
		0, -1, -31, -32, -33, -63, -64, -65, -126, -127, -128, -129,
		-192, -201, -254, -255, -256,
		-32764, -32765, -32766, -65534, -65535, -65536,
		-2147483646, -2147483647, -21474836478,
		-4294967294, -4294967295, -4294967296,
		-9223372036854775806, -9223372036854775807} {
		_, err := PackInt64(b, i)
		if err != nil {
			t.Error("err != nil")
		}
	}

	if bytes.Compare(b.Bytes(), []byte{
		0x0, 0x1, 0x1f, 0x20, 0x21, 0x3f, 0x40, 0x41, 0x7e, 0x7f, 0xd1, 0x0, 0x80, 0xd1,
		0x0, 0x81, 0xd1, 0x0, 0xc0, 0xd1, 0x0, 0xc9, 0xd1, 0x0, 0xfe, 0xd1, 0x0, 0xff,
		0xd1, 0x1, 0x0, 0xd1, 0x7f, 0xfc, 0xd1, 0x7f, 0xfd, 0xd1, 0x7f, 0xfe, 0xd2, 0x0,
		0x0, 0xff, 0xfe, 0xd2, 0x0, 0x0, 0xff, 0xff, 0xd2, 0x0, 0x1, 0x0, 0x0, 0xd2, 0x7f,
		0xff, 0xff, 0xfe, 0xd2, 0x7f, 0xff, 0xff, 0xff, 0xd3, 0x0, 0x0, 0x0, 0x4, 0xff,
		0xff, 0xff, 0xfe, 0xd3, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xfe, 0xd3, 0x0, 0x0,
		0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xd3, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0xd3,
		0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xd3, 0x7f, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0x0, 0xff, 0xe1, 0xe0, 0xd0, 0xdf, 0xd0, 0xc1, 0xd0, 0xc0, 0xd0,
		0xbf, 0xd0, 0x82, 0xd0, 0x81, 0xd0, 0x80, 0xd1, 0xff, 0x7f, 0xd1, 0xff, 0x40, 0xd1,
		0xff, 0x37, 0xd1, 0xff, 0x2, 0xd1, 0xff, 0x1, 0xd1, 0xff, 0x0, 0xd1, 0x80, 0x4, 0xd1,
		0x80, 0x3, 0xd1, 0x80, 0x2, 0xd2, 0xff, 0xff, 0x0, 0x2, 0xd2, 0xff, 0xff, 0x0, 0x1,
		0xd2, 0xff, 0xff, 0x0, 0x0, 0xd2, 0x80, 0x0, 0x0, 0x2, 0xd2, 0x80, 0x0, 0x0, 0x1,
		0xd3, 0xff, 0xff, 0xff, 0xfb, 0x0, 0x0, 0x0, 0x2, 0xd3, 0xff, 0xff, 0xff, 0xff, 0x0,
		0x0, 0x0, 0x2, 0xd3, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x1, 0xd3, 0xff, 0xff,
		0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0xd3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0xd3,
		0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1}) != 0 {
		t.Error("wrong output", b.Bytes())
	}
}

func TestPackFloat32(t *testing.T) {
	b := &bytes.Buffer{}

	for _, i := range []float32{324.234, 23.123, 3.1415926} {
		_, err := PackFloat(b, i)
		if err != nil {
			t.Error("err != nil")
		}
	}

	if bytes.Compare(b.Bytes(), []byte{
		0xca, 0x43, 0xa2, 0x1d, 0xf4,
		0xca, 0x41, 0xb8, 0xfb, 0xe7,
		0xca, 0x40, 0x49, 0xf, 0xda}) != 0 {
		t.Error("wrong output", b.Bytes())
	}
}

func TestPackFloat64(t *testing.T) {
	b := &bytes.Buffer{}

	for _, i := range []float64{324.23126783764, 23.176867867823, 3.1416786785926} {
		_, err := PackDouble(b, i)
		if err != nil {
			t.Error("err != nil")
		}
	}

	if bytes.Compare(b.Bytes(), []byte{
		0xcb, 0x40, 0x74, 0x43, 0xb3, 0x45, 0xe7, 0x74, 0x7d,
		0xcb, 0x40, 0x37, 0x2d, 0x47, 0x36, 0x6c, 0x3, 0x56,
		0xcb, 0x40, 0x9, 0x22, 0x28, 0x6e, 0x58, 0xc4, 0x5}) != 0 {
		t.Errorf("wrong output 0x%02x", b.Bytes())
	}
}

func TestPackBool(t *testing.T) {
	b := &bytes.Buffer{}

	for _, i := range []bool{true, false} {
		_, err := PackBool(b, i)
		if err != nil {
			t.Error("err != nil")
		}
	}

	if bytes.Compare(b.Bytes(), []byte{0xc3, 0xc2}) != 0 {
		t.Error("wrong output", b.Bytes())
	}
}

func TestPackRawBuffer(t *testing.T) {
	b := &bytes.Buffer{}

	for _, i := range []([]byte){
		[]byte("hello world"),
		[]byte("abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"),
		[]byte("你好，世界！")} {
		_, err := PackRawBuffer(b, i)
		if err != nil {
			t.Error("err != nil")
		}
	}

	if bytes.Compare(b.Bytes(), []byte{
		0xab, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0xda, 0x2,
		0x8, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d,
		0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61,
		0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
		0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63,
		0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71,
		0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65,
		0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73,
		0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
		0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75,
		0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
		0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
		0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b,
		0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
		0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d,
		0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61,
		0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
		0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63,
		0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71,
		0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65,
		0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73,
		0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
		0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75,
		0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
		0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
		0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b,
		0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
		0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d,
		0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61,
		0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
		0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63,
		0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71,
		0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65,
		0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73,
		0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
		0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75,
		0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
		0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
		0x78, 0x79, 0x7a, 0xb2, 0xe4, 0xbd, 0xa0, 0xe5, 0xa5, 0xbd, 0xef, 0xbc, 0x8c, 0xe4,
		0xb8, 0x96, 0xe7, 0x95, 0x8c, 0xef, 0xbc, 0x81}) != 0 {
		t.Errorf("wrong output 0x%x", b.Bytes())
	}
}
